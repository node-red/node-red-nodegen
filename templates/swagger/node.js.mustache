"use strict";
var lib = require('./lib.js');

module.exports = function (RED) {
    function {{&className}}Node(config) {
        RED.nodes.createNode(this, config);
        this.service = RED.nodes.getNode(config.service);
        this.method = config.method;

        {{#methods}}
        {{#parameters}}
        this.{{&methodName}}_{{&camelCaseName}} = config.{{&methodName}}_{{&camelCaseName}};
        this.{{&methodName}}_{{&camelCaseName}}Type = config.{{&methodName}}_{{&camelCaseName}}Type || 'str';
        {{/parameters}}
        {{/methods}}

        var node = this;

        node.on('input', function (msg) {
            {{#domain}}
            var client = new lib.{{&className}}();
            {{/domain}}
            {{^domain}}
            var client = new lib.{{&className}}({ domain: this.service.host });
            {{/domain}}

            {{#isSecure}}
            {{#isSecureToken}}
            if (this.service && this.service.credentials && this.service.credentials.secureTokenValue) {
                if (this.service.secureTokenIsQuery) {
                    client.setToken(this.service.credentials.secureTokenValue,
                                    this.service.secureTokenHeaderOrQueryName, true);
                } else {
                    client.setToken(this.service.credentials.secureTokenValue,
                                    this.service.secureTokenHeaderOrQueryName, false);
                }
            }
            {{/isSecureToken}}
            {{#isSecureApiKey}}
            if (this.service && this.service.credentials && this.service.credentials.secureApiKeyValue) {
                if (this.service.secureApiKeyIsQuery) {
                    client.setApiKey(this.service.credentials.secureApiKeyValue,
                                     this.service.secureApiKeyHeaderOrQueryName, true);
                } else {
                    client.setApiKey(this.service.credentials.secureApiKeyValue,
                                     this.service.secureApiKeyHeaderOrQueryName, false);
                }
            }
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
            if (this.service && this.service.credentials) {
                client.setBasicAuth(this.service.credentials.username, this.service.credentials.password);
            }
            {{/isSecureBasic}}
            {{/isSecure}}

            client.body = msg.payload;

            var result;
            var errorFlag = false;
            {{#methods}}
            if (node.method === '{{&methodName}}') {
                var parameters = [], nodeParam, nodeParamType;
                {{#parameters}}
                {{#isBodyParam}}
                if (typeof msg.payload === 'object') {
                    parameters.{{&camelCaseName}} = msg.payload;
                } else {
                    node.error('Unsupported type: \'' + (typeof msg.payload) + '\', '
                             + 'msg.payload must be JSON object or buffer.');
                    errorFlag = true;
                }
                {{/isBodyParam}}
                {{#isNotBodyParam}}
                nodeParam = node.{{&methodName}}_{{&camelCaseName}};
                nodeParamType = node.{{&methodName}}_{{&camelCaseName}}Type;
                parameters.{{&camelCaseName}} = nodeParamType === 'str' ? nodeParam || '' : RED.util.getMessageProperty(msg, nodeParam);
                {{/isNotBodyParam}}
                {{/parameters}}

                result = client.{{&methodName}}(parameters);
            }

            {{/methods}}
            if (!errorFlag) {
                node.status({ fill: "blue", shape: "dot", text: "{{&className}}.status.requesting" });
                result.then(function (response) {
                    if (response.body !== null && response.body !== undefined) {
                        msg.payload = response.body;
                    }
                    node.send(msg);
                    node.status({});
                }).catch(function (error) {
                    node.error(error);
                    node.status({ fill: "red", shape: "ring", text: "node-red:common.status.error" });
                });
            }
        });
    }
    RED.nodes.registerType("{{&nodeName}}", {{&className}}Node);

    function {{&className}}ServiceNode(n) {
        RED.nodes.createNode(this, n);
        {{^domain}}
        this.host = n.host;
        {{/domain}}

        {{#isSecure}}
        {{#isSecureToken}}
        this.secureTokenValue = n.secureTokenValue;
        this.secureTokenHeaderOrQueryName = n.secureTokenHeaderOrQueryName;
        this.secureTokenIsQuery = n.secureTokenIsQuery;
        {{/isSecureToken}}
        {{#isSecureApiKey}}
        this.secureApiKeyValue = n.secureApiKeyValue;
        this.secureApiKeyHeaderOrQueryName = n.secureApiKeyHeaderOrQueryName;
        this.secureApiKeyIsQuery = n.secureApiKeyIsQuery;
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
        this.username = n.username;
        this.password = n.password;
        {{/isSecureBasic}}
        {{/isSecure}}
    }
    RED.nodes.registerType("{{&nodeName}}-service", {{&className}}ServiceNode, {
        credentials: {
            {{#isSecure}}
            {{#isSecureToken}}
            secureTokenValue: { type: "password" },
            {{/isSecureToken}}
            {{#isSecureApiKey}}
            secureApiKeyValue: { type: "password" },
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
            username: { type: "text" },
            password: { type: "password" },
            {{/isSecureBasic}}
            {{/isSecure}}
            temp: { type: "text" }
        }
    });
};
