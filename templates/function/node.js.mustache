/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function (RED) {
    "use strict";
    var util = require("util");

    function sendResults(node, _msgid, msgs) {
        if (msgs === null) {
            return;
        } else if (!util.isArray(msgs)) {
            msgs = [msgs];
        }
        var msgCount = 0;
        for (var m = 0; m < msgs.length; m++) {
            if (msgs[m]) {
                if (!util.isArray(msgs[m])) {
                    msgs[m] = [msgs[m]];
                }
                for (var n = 0; n < msgs[m].length; n++) {
                    var msg = msgs[m][n];
                    if (msg !== null && msg !== undefined) {
                        if (typeof msg === 'object' && !Buffer.isBuffer(msg) && !util.isArray(msg)) {
                            msg._msgid = _msgid;
                            msgCount++;
                        } else {
                            var type = typeof msg;
                            if (type === 'object') {
                                type = Buffer.isBuffer(msg)?'Buffer':(util.isArray(msg)?'Array':'Date');
                            }
                            node.error(RED._("function.error.non-message-returned", { type: type }));
                        }
                    }
                }
            }
        }
        if (msgCount > 0) {
            node.send(msgs);
        }
    }

    function FunctionNode (n) {
        RED.nodes.createNode(this,n);
        var node = this;
        this.outstandingTimers = [];
        this.outstandingIntervals = [];
        var sandbox = {
            setTimeout: function () {
                var func = arguments[0];
                var timerId;
                arguments[0] = function () {
                    sandbox.clearTimeout(timerId);
                    try {
                        func.apply(this,arguments);
                    } catch(err) {
                        node.error(err,{});
                    }
                };
                timerId = setTimeout.apply(this,arguments);
                node.outstandingTimers.push(timerId);
                return timerId;
            },
            clearTimeout: function (id) {
                clearTimeout(id);
                var index = node.outstandingTimers.indexOf(id);
                if (index > -1) {
                    node.outstandingTimers.splice(index,1);
                }
            },
            setInterval: function () {
                var func = arguments[0];
                var timerId;
                arguments[0] = function() {
                    try {
                        func.apply(this,arguments);
                    } catch(err) {
                        node.error(err,{});
                    }
                };
                timerId = setInterval.apply(this,arguments);
                node.outstandingIntervals.push(timerId);
                return timerId;
            },
            clearInterval: function (id) {
                clearInterval(id);
                var index = node.outstandingIntervals.indexOf(id);
                if (index > -1) {
                    node.outstandingIntervals.splice(index,1);
                }
            }
        };

        var results = function (msg, __node__) { 
            var __msgid__ = msg._msgid;
            var node = {
                id: __node__.id,
                name: __node__.name,
                log: function () {
                    __node__.log.apply(__node__, arguments);
                },
                error: function () {
                    __node__.error.apply(__node__, arguments);
                },
                warn: function () {
                    __node__.warn.apply(__node__, arguments);
                },
                debug: function () {
                    __node__.debug.apply(__node__, arguments);
                },
                trace: function () {
                    __node__.trace.apply(__node__, arguments);
                },
                send: function (__msg__) {
                    sendResults(__node__, __msg__.msgid, __msg__);
                },
                on: function () {
                    if (arguments[0] === "input") {
                        throw new Error(RED._("function.error.inputListener"));
                    }
                    __node__.on.apply(__node__, arguments);
                },
                status: function () {
                    __node__.status.apply(__node__, arguments);
                }
            };
            var context = {
                set: function () {
                    __node__.context().set.apply(__node__,arguments);
                },
                get: function () {
                    return __node__.context().get.apply(__node__,arguments);
                },
                keys: function () {
                    return __node__.context().keys.apply(__node__,arguments);
                },
                get global () {
                    return __node__.context().global;
                },
                get flow () {
                    return __node__.context().flow;
                }
            };
            var flow = {
                set: function () {
                    __node__.context().flow.set.apply(__node__,arguments);
                },
                get: function () {
                    return __node__.context().flow.get.apply(__node__,arguments);
                },
                keys: function () {
                    return __node__.context().flow.keys.apply(__node__,arguments);
                }
            };
            var global = {
                set: function () {
                    __node__.context().global.set.apply(__node__,arguments);
                },
                get: function () {
                    return __node__.context().global.get.apply(__node__,arguments);
                },
                keys: function () {
                    return __node__.context().global.keys.apply(__node__,arguments);
                }
            };
            var setTimeout = function (cb, delay) {
                var timerId = sandbox.setTimeout(cb, delay);
                return timerId;
            };
            var clearTimeout = function (id) {
                sandbox.clearTimeout(id);
            };
            var setInterval = function (cb, delay) {
                var timerId = sandbox.setInterval(cb, delay);
                return timerId;
            };
            var clearInterval = function (id) {
                sandbox.clearInterval(id);
            };
            {{&func}}
        };

        if (util.hasOwnProperty('promisify')) {
            sandbox.setTimeout[util.promisify.custom] = function(after, value) {
                return new Promise(function(resolve, reject) {
                    sandbox.setTimeout(function () { resolve(value); }, after);
                });
            };
        }

        try {
            this.on("input", function (msg) {
                var start = process.hrtime();
                sendResults(this, msg._msgid, results(msg, node));
                var duration = process.hrtime(start);
                var converted = Math.floor((duration[0] * 1e9 + duration[1])/10000)/100;
                this.metric("duration", msg, converted);
                if (process.env.NODE_RED_FUNCTION_TIME) {
                    this.status({fill:"yellow",shape:"dot",text:""+converted});
                }
            });
            this.on("close", function () {
                while (node.outstandingTimers.length > 0) {
                    clearTimeout(node.outstandingTimers.pop());
                }
                while (node.outstandingIntervals.length > 0) {
                    clearInterval(node.outstandingIntervals.pop());
                }
                this.status({});
            });
        } catch (err) {
            this.error(err);
        }
    }
    RED.nodes.registerType("{{&nodeName}}", FunctionNode);
    RED.library.register("functions");
};
